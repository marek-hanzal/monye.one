generator client {
    provider = "prisma-client-js"
}

generator zod {
    provider                         = "zod-prisma-types"
    output                           = "../src/schema"
    useMultipleFiles                 = false
    createInputTypes                 = true
    createModelTypes                 = true
    addInputTypeValidation           = true
    addIncludeType                   = true
    createPartialTypes               = true
    addSelectType                    = true
    validateWhereUniqueInput         = true
    writeNullishInModelTypes         = true
    createOptionalDefaultValuesTypes = true
    createRelationValuesTypes        = true
    useDefaultValidators             = true
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?

    accounts  Account[]
    sessions  Session[]
    UserToken UserToken[]
    File      File[]
    Job       Job[]
    Filter    Filter[]
    Label     Label[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Token {
    id   String @id @default(cuid())
    name String @unique

    UserToken UserToken[]
}

model UserToken {
    id      String @id @default(cuid())
    userId  String
    user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    tokenId String
    token   Token  @relation(fields: [tokenId], references: [id], onDelete: Cascade)

    @@unique([userId, tokenId])
}

model File {
    id       String    @id @default(cuid())
    path     String
    name     String
    mime     String
    size     Int
    location String
    ttl      Int?
    created  DateTime
    updated  DateTime?
    userId   String?
    user     User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, path, name])
}

model Translation {
    id     String @id @default(cuid())
    locale String @db.VarChar(32)
    label  String @db.Text
    text   String @db.Text
    hash   String @db.VarChar(128)

    @@unique([locale, hash])
}

model Job {
    id           String    @id @default(cuid())
    name         String
    status       JobStatus @default(NEW)
    total        Int       @default(0)
    progress     Float     @default(0)
    success      Int?
    successRatio Float?
    failure      Int?
    failureRatio Float?
    skip         Int?
    skipRatio    Float?
    created      DateTime
    started      DateTime?
    finished     DateTime?
    userId       String?
    user         User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
    params       String?   @db.Text

    logs JobLog[]
}

model JobLog {
    id      String @id @default(cuid())
    jobId   String
    job     Job    @relation(fields: [jobId], references: [id], onDelete: Cascade)
    message String @db.Text
}

enum JobStatus {
    // Just created, nobody cares about the job yet
    NEW
    // Job has been picked up and is in progress.
    RUNNING
    // Job has been successfully done; waiting for "commit".
    SUCCESS
    // Job has failed hard (usually outside of boundaris of the job handler)
    FAILURE
    //  Job has been processed, but there are some failed items
    REVIEW
    //  When everything is OK, it's done: goes from review->done and failure->done
    DONE
}

model Keyword {
    id   String @id @default(cuid())
    text String @unique @db.Text
}

model Filter {
    id     String  @id @default(cuid())
    name   String
    type   String
    userId String
    user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    filter String  @db.Text
    dto    String? @db.Text

    @@unique([userId, type, name])
}

model Label {
    id     String @id @default(cuid())
    label  String
    type   String
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}
