import {withSourceFile}  from "@leight/generator-server";
import {normalize}       from "node:path";
import {type IGenerator} from "../api";

export interface IGeneratorClientContextParams {
    /**
     * Package used to import schema (usually generated by the leight sdk)
     */
    schemaPackage: string;
    modelName: string;
}

export const generatorClientContext: IGenerator<IGeneratorClientContextParams> = async (
    {
        file,
        barrel,
        params: {
                    schemaPackage,
                    modelName,
                }
    }) => {
    withSourceFile()
        .withImports({
            imports: {
                "@leight/source-client": [
                    "createSourceContext",
                    "type ISourceProps",
                ],
                "@leight/sort-client":   [
                    "createSortContext"
                ],
                [schemaPackage]:         [
                    `type I${modelName}SourceSchema`,
                    `${modelName}Schema`,
                    `type I${modelName}SortSchema`,
                    `${modelName}SortSchema`,
                ],
            },
        })
        .withTypes({
            exports: {
                [`I${modelName}Source`]: `ISourceProps<I${modelName}SourceSchema>`,
            },
        })
        .withConsts({
            consts:  {
                "StoreSourceContext": {
                    body: `
createSourceContext<I${modelName}SourceSchema>({
    name:   "${modelName}",
    schema: ${modelName}Schema,
})
                    `,
                },
                "StoreSortContext":   {
                    body: `
createSortContext<I${modelName}SortSchema>({
    name:   "${modelName}Sort",
    schema: ${modelName}SortSchema,
})
                    `,
                },
            },
            exports: {
                [`${modelName}Provider`]:          {body: "StoreSourceContext.Provider"},
                [`use${modelName}Source`]:         {body: "StoreSourceContext.useState"},
                [`useOptional${modelName}Source`]: {body: "StoreSourceContext.useOptionalState"},
                [`use${modelName}Store`]:          {body: "StoreSourceContext.useStore"},
                [`useOptional${modelName}Store`]:  {body: "StoreSourceContext.useOptionalStore"},

                [`${modelName}SortProvider`]:         {body: "StoreSortContext.Provider"},
                [`use${modelName}Sort`]:              {body: "StoreSortContext.useState"},
                [`useOptional${modelName}Sort`]:      {body: "StoreSortContext.useOptionalState"},
                [`use${modelName}SortStore`]:         {body: "StoreSortContext.useStore"},
                [`useOptional${modelName}SortStore`]: {body: "StoreSortContext.useOptionalStore"},
            }
        })
        .saveTo({
            file: normalize(`${process.cwd()}/${file}`),
            barrel,
        });
};
