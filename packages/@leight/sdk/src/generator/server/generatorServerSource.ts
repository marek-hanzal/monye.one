import {withSourceFile}  from "@leight/generator-server";
import {normalize}       from "node:path";
import {type IGenerator} from "../../api";

export interface IGeneratorServerSourceParams {
    entities: IGeneratorServerSourceParams.IEntity[];
}

export namespace IGeneratorServerSourceParams {
    export interface IEntity {
        /**
         * Base name exported (used to name all exported objects)
         */
        name: string;
        /**
         * Required package imports
         */
        packages: IPackages;
    }

    export interface IPackages {
        /**
         * Package used to import all schema-related types (ISource implementation, IWhere and so on, can be generated by @leight).
         */
        schema: string;
    }
}

export const generatorServerSource: IGenerator<IGeneratorServerSourceParams> = async (
    {
        barrel,
        directory,
        params: {entities},
    }) => {
    entities.forEach(({name, packages}) => {
        withSourceFile()
            .withImports({
                imports: {
                    "@leight/source-server": [
                        `AbstractSourceMapper`,
                    ],
                    [packages.schema]:       [
                        `type I${name}SourceSchemaType`,
                        `type I${name}SourceMapper`,
                    ],
                },
            })
            .withClasses({
                exports: {
                    [`${name}BaseSourceMapper`]: {
                        extends:    `AbstractSourceMapper<I${name}SourceSchemaType>`,
                        implements: `I${name}SourceMapper`,
                    },
                },
            })
            .saveTo({
                file: normalize(`${directory}/SourceMapper/${name}BaseSourceMapper.ts`),
                barrel,
            });

        withSourceFile()
            .withImports({
                imports: {
                    "@leight/source-server": [
                        "AbstractSourceService",
                    ],
                    "@leight/source":        [
                        "type ISourceService",
                        "type ISourceMapper",
                        "type ISource",
                    ],
                    [packages.schema]:       [
                        `$${name}Source`,
                        `$${name}SourceMapper`,
                        `type I${name}SourceSchemaType`,
                    ],
                },
            })
            .withInterfaces({
                exports: {
                    [`I${name}SourceService`]: {
                        extends: [
                            {
                                type: `ISourceService<I${name}SourceSchemaType>`,
                            },
                        ],
                    },
                },
            })
            .withClasses({
                exports: {
                    [`${name}BaseSourceService`]: {
                        implements: `I${name}SourceService`,
                        extends:    `AbstractSourceService<I${name}SourceSchemaType>`,
                        body:       `
static inject = [
        $${name}Source,
        $${name}SourceMapper,
    ];
    
    constructor(
        protected $source: ISource<I${name}SourceSchemaType>,
        protected $mapper: ISourceMapper<I${name}SourceSchemaType>,
    ) {
        super();
    }
    
    source(): ISource<I${name}SourceSchemaType> {
        return this.$source;
    }
    
    mapper(): ISourceMapper<I${name}SourceSchemaType> {
        return this.$mapper;
    }
                        `
                    },
                },
            })
            .saveTo({
                file: normalize(`${directory}/SourceService/${name}BaseSourceService.ts`),
                barrel,
            });
    });
};
