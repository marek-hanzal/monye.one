import {IPackageType}    from "@leight/generator";
import {withSourceFile}  from "@leight/generator-server";
import {normalize}       from "node:path";
import {type IGenerator} from "../../api";

export interface IGeneratorServerSourceParams {
    entities: IGeneratorServerSourceParams.IEntity[];
}

export namespace IGeneratorServerSourceParams {
    export interface IEntity {
        /**
         * Base name exported (used to name all exported objects)
         */
        name: string;
        /**
         * Required package imports
         */
        packages: IPackages;
        /**
         * If you want to extend default Source implementation by your own
         * stuff, put here a type and package it's coming from
         */
        sourceEx?: IPackageType;
        /**
         * If the Source is using Prisma connection, you should put "true" here as it's included
         * from different package.
         */
        withPrisma?: boolean;
    }

    export interface IPackages {
        /**
         * Package used to import all schema-related types (ISource implementation, IWhere and so on, can be generated by @leight).
         */
        schema: string;
    }
}

export const generatorServerSource: IGenerator<IGeneratorServerSourceParams> = async (
    {
        barrel,
        folder,
        params: {entities},
    }) => {
    const file = withSourceFile();

    entities.forEach(({name, sourceEx, withPrisma, packages}) => {
        const baseSource = withPrisma ? `${name}BasePrismaSource` : `${name}BaseSource`;

        file.withImports({
                imports: {
                    [packages.schema]: [
                        `type I${name}Source`,
                    ],
                },
            })
            .withImports(sourceEx?.type ? undefined : {
                imports: {
                    [withPrisma ? "./ServerPrismaSource" : "./ServerBaseSource"]: [
                        baseSource,
                    ],
                },
            })
            .withImports(sourceEx?.package ? {
                imports: {
                    [sourceEx.package]: [
                        sourceEx.type,
                    ],
                },
            } : undefined)
            .withClasses({
                exports: {
                    [`${name}Source`]: {
                        extends:    sourceEx?.type ? sourceEx.type : baseSource,
                        implements: `I${name}Source`,
                    },
                },
            });
    });

    file.saveTo({
        file: normalize(`${process.cwd()}/${folder}/ServerSource.ts`),
        barrel,
    });
};
