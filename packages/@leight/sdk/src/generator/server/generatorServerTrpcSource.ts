import {withSourceFile}  from "@leight/generator-server";
import {normalize}       from "node:path";
import {type IGenerator} from "../../api";

export interface IGeneratorServerTrpcSourceParams {
    entities: IGeneratorServerTrpcSourceParams.IEntity[];
}

export namespace IGeneratorServerTrpcSourceParams {
    export interface IEntity {
        /**
         * Base name exported (used to name all exported objects)
         */
        name: string;
        /**
         * Required package imports
         */
        packages: IPackages;
    }

    export interface IPackages {
        /**
         * Package used to import all schema-related types (ISource implementation, IWhere and so on, can be generated by @leight).
         */
        schema: string;
    }
}

export const generatorServerTrpcSource: IGenerator<IGeneratorServerTrpcSourceParams> = async (
    {
        barrel,
        folder,
        params: {entities},
    }) => {
    const file = withSourceFile();

    entities.forEach(({name, packages}) => {
        file.withImports({
                imports: {
                    "@leight/trpc-source-server": [
                        "withSourceProcedure",
                    ],
                }
            })
            .withImports({
                imports: {
                    [packages.schema]: [
                        `$${name}Source`,
                        `${name}SourceSchema`,
                        `type I${name}SourceSchema`,
                    ],
                },
            })
            .withConsts({
                exports: {
                    [`${name}SourceProcedure`]: {
                        body: `
withSourceProcedure<I${name}SourceSchema>({
    source: $${name}Source,
    schema: ${name}SourceSchema['QuerySchema'],
})
                    `,
                    },
                },
            });
    });


    file.saveTo({
        file: normalize(`${process.cwd()}/${folder}/ServerTrpc.ts`),
        barrel,
    });
};
