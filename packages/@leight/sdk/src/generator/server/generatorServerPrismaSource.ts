import {withSourceFile}  from "@leight/generator-server";
import {normalize}       from "node:path";
import {type IGenerator} from "../../api";

export interface IGeneratorServerPrismaSourceParams {
    entities: IGeneratorServerPrismaSourceParams.IEntity[];
}

export namespace IGeneratorServerPrismaSourceParams {
    export interface IEntity {
        /**
         * Base name exported (used to name all exported objects)
         */
        name: string;
        /**
         * Name of prisma "repository" (to generate prismaClient.<prisma> calls); usually snakeCase model name.
         */
        prisma: string;
        /**
         * Required package imports
         */
        packages: IPackages;
        /**
         * Generates additional includes in the PrismaSource
         */
        withInclude?: Record<string, any>;
    }

    export interface IPackages {
        /**
         * Package used to import all schema-related types (ISource implementation, IWhere and so on, can be generated by @leight).
         */
        schema: string;
        /**
         * Prisma package which exports PrismaClient.
         */
        prisma: string;
    }
}

export const generatorServerPrismaSource: IGenerator<IGeneratorServerPrismaSourceParams> = async (
    {
        barrel,
        directory,
        params: {entities},
    }) => {
    entities.forEach(({name, prisma, packages, withInclude}) => {
        const $withInclude = withInclude ? JSON.stringify(withInclude) : undefined;

        withSourceFile()
            .withHeader(`
    Base Prisma Source contains default implementation of Source for entity ${name} connected to Prisma. This could be used for further extensions,
    also default export uses this as a parent class.
        `)
            .withImports({
                imports: {
                    "@leight/prisma":        [
                        "$PrismaClient",
                    ],
                    "@leight/source":        [
                        "withCursor",
                        "type ISource",
                        "type IWithIdentity",
                        "SourceError",
                    ],
                    "@leight/source-server": [
                        "AbstractSourceEx",
                    ],
                },
            })
            .withImports({
                imports: {
                    [packages.schema]: [
                        `$${name}Source`,
                        `type I${name}SourceSchemaType`,
                        `type I${name}PrismaSchemaType`,
                    ],
                },
            })
            .withImports({
                imports: {
                    [packages.prisma]: [
                        "type PrismaClient",
                    ],
                },
            })
            .withClasses({
                exports: {
                    [`${name}BasePrismaSource`]: {
                        extends: `AbstractSourceEx<I${name}PrismaSchemaType, I${name}SourceSchemaType>`,
                        body:    `
    static inject = [
        $PrismaClient,
    ];

    constructor(
        protected prismaClient: PrismaClient,
    ) {
        super($${name}Source);
    }

    async runFind(id: string): Promise<I${name}SourceSchemaType["Entity"]> {
        return this.prisma().findUniqueOrThrow({
            where: {id},${withInclude ? `\n\t\t\tinclude: this.withInclude(),` : ""}
        });
    }

    async runFetch({filter}: I${name}SourceSchemaType["Query"]): Promise<I${name}SourceSchemaType["Entity"]> {
        return this.prisma().findFirstOrThrow({
            where: this.toWhere(filter),${withInclude ? `\n\t\t\tinclude: this.withInclude(),` : ""}
        });
    }

    async runCreate(entity: I${name}SourceSchemaType["Create"]): Promise<I${name}SourceSchemaType["Entity"]> {
        return this.prisma().create({
            data: entity,${withInclude ? `\n\t\t\tinclude: this.withInclude(),` : ""}
        });
    }

    async runPatch({patch, filter}: ISource.IPatch<I${name}SourceSchemaType>): Promise<I${name}SourceSchemaType["Entity"]> {
        return this.prisma().update({
            data: patch,
            where: this.toWhereUnique(filter),${withInclude ? `\n\t\t\tinclude: this.withInclude(),` : ""}
        });
    }
    
    async runPatchBy({patch, filter}: ISource.IPatchBy<I${name}SourceSchemaType>): Promise<unknown> {
        return this.prisma().updateMany({
            data:  patch,
            where: this.toWhere(filter),
        });
    }

    async runUpsert({filter, patch: update, create}: ISource.IUpsert<I${name}SourceSchemaType>): Promise<I${name}SourceSchemaType["Entity"]> {
        return this.prisma().upsert({
            create,
            update,
            where: this.toWhereUnique(filter),${withInclude ? `\n\t\t\tinclude: this.withInclude(),` : ""}
        });
    }

    async runDelete({id}: IWithIdentity): Promise<I${name}SourceSchemaType["Entity"]> {
        const item = await this.find(id);
        const where = this.toWhereUnique({id});
        if(!where) {
            throw new SourceError("Cannot delete an item with an empty where condition!");
        }
        await this.prisma().delete({
            where,
        });
        return item;
    }
    
    async runDeleteWith(query: I${name}SourceSchemaType["Query"]): Promise<I${name}SourceSchemaType["Entity"][]> {
        const items = await this.query(query);
        const where = this.toWhere(query.filter);
        if(!where) {
            throw new SourceError("Cannot delete an item with an empty where condition!");
        } 
        await this.prisma().deleteMany({
            where,
        });
        return items;
    }

    async runCount(query?: I${name}SourceSchemaType["Query"]): Promise<number> {
        return this.prisma().count({
            where: this.toWhere(query?.filter),
        });
    }

    async runQuery(query?: I${name}SourceSchemaType["Query"]): Promise<I${name}SourceSchemaType["Entity"][]> {
        return this.prisma().findMany(withCursor({
            query,
            arg: {
                where:   this.toWhere(query?.filter),
                orderBy: this.toOrderBy(query?.sort),${withInclude ? `\n\t\t\t\tinclude: this.withInclude(),` : ""}
            },
        }));
    }
    
    withInclude() {
        return ${$withInclude ? `${$withInclude} as const` : "undefined"};
    }
    
    prisma() {
        return this.prismaClient.${prisma};
    }
                    `,
                    },
                },
            })
            .saveTo({
                file: normalize(`${directory}/Source/${name}BasePrismaSource.ts`),
                barrel,
            });
    });
};
