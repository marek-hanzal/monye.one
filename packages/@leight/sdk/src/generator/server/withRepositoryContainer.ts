import {withSourceFile} from "@leight/generator-server";
import {normalize} from "node:path";
import {type IGenerator} from "../../api";

export interface IWithRepositoryContainerParams {
    repositories: IWithRepositoryContainerParams.IRepository[];
}

export namespace IWithRepositoryContainerParams {
    export interface IRepository {
        name: string;
        type?: "common" | "extended";
        packages: IPackages;
    }

    export interface IPackages {
        /**
         * Package used to import all schema-related types (ISource implementation, IWhere and so on, can be generated by @leight).
         */
        schema: string;
    }
}

export const withRepositoryContainer: IGenerator<IWithRepositoryContainerParams> = async (
    {
        directory,
        barrel,
        params: {repositories},
    }) => {
    repositories.forEach(({name, type = "extended", packages}) => {
        console.log(`- Generating [withRepositoryContainer] [${name}]`);

        const repository = `Base${name}Repository` + (type === "extended" ? "Ex" : "");
        withSourceFile()
            .withImports({
                imports: {
                    "@leight/container":                         [
                        "type IContainer",
                    ],
                    [`../repository/${repository}`]:             [
                        repository,
                    ],
                    [`../mapper/Base${name}RepositoryMapper`]:   [
                        `Base${name}RepositoryMapper`,
                    ],
                    [`../service/Base${name}RepositoryService`]: [
                        `Base${name}RepositoryService`,
                    ],
                },
            })
            .withImports({
                imports: {
                    [packages.schema]: [
                        `$${name}Repository`,
                        `$${name}RepositoryMapper`,
                        `$${name}RepositoryService`,
                    ],
                },
            })
            .withConsts({
                exports: {
                    [`with${name}RepositoryContainer`]: {
                        body: `
(container: IContainer) => {
    container.bindClass($${name}Repository, ${repository});
    container.bindClass($${name}RepositoryMapper, Base${name}RepositoryMapper);
    container.bindClass($${name}RepositoryService, Base${name}RepositoryService);
}
                        `
                    },
                }
            })
            .saveTo({
                file: normalize(`${directory}/container/with${name}RepositoryContainer.ts`),
                barrel,
            });
    });
};
