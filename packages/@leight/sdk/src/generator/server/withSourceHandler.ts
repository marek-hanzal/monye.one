import {withSourceFile}  from "@leight/generator-server";
import {normalize}       from "node:path";
import {type IGenerator} from "../../api";

export interface IWithSourceHandlerParams {
    entities: IWithSourceHandlerParams.IEntity[];
}

export namespace IWithSourceHandlerParams {
    export interface IEntity {
        /**
         * Base name exported (used to name all exported objects)
         */
        name: string;
        /**
         * Required package imports
         */
        packages: IPackages;
    }

    export interface IPackages {
        /**
         * Package used to import all schema-related types (ISource implementation, IWhere and so on, can be generated by @leight).
         */
        schema: string;
    }
}

export const withSourceHandler: IGenerator<IWithSourceHandlerParams> = async (
    {
        barrel,
        directory,
        params: {entities},
    }) => {
    entities.forEach(({name, packages}) => {
        withSourceFile()
            .withImports({
                imports: {
                    "@leight/trpc-source-server": [
                        "withSourceHandler",
                    ],
                }
            })
            .withImports({
                imports: {
                    [packages.schema]: [
                        `$${name}RepositoryService`,
                        `type I${name}RepositorySchema`,
                    ],
                },
            })
            .withConsts({
                exports: {
                    [`${name}RepositoryHandler`]: {
                        body: `
withSourceHandler<I${name}RepositorySchema>({
    sourceService: $${name}RepositoryService,
})
                    `,
                    },
                },
            })
            .saveTo({
                file: normalize(`${directory}/ServerTrpc/${name}Trpc.ts`),
                barrel,
            });
    });
};
