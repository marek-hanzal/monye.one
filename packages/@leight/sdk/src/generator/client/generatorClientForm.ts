import {withSourceFile}  from "@leight/generator-server";
import {normalize}       from "node:path";
import {type IGenerator} from "../../api";

export interface IGeneratorClientFormParams {
    forms: IGeneratorClientFormParams.IForm[];
}

export namespace IGeneratorClientFormParams {
    export interface IForm {
        /**
         * Base name exported (used to name all exported objects)
         */
        name: string;
        type?: "common" | "dto";
        translation: {
            namespace: string;
        };
        packages?: IPackages;
        withTrpc?: IWithTrpc;
    }

    export interface IWithTrpc {
        /**
         * Name of the Source provider
         */
        source: string;
        /**
         * Which mutation to use
         */
        use: string;
    }

    export interface IPackages {
        /**
         * Package used to import all schema-related types (ISource implementation, IWhere and so on, can be generated by @leight).
         */
        schema?: string;
    }
}

export const generatorClientForm: IGenerator<IGeneratorClientFormParams> = async (
    {
        barrel,
        directory,
        params: {forms}
    }) => {
    forms.forEach(({name, type = "common", translation, withTrpc, packages}) => {
        withSourceFile()
            .withImports({
                imports: {
                    "@leight/form-client":                [
                        "type IMantineFormContext",
                        "type IFormSchemaType",
                        "type IFormInputsFactory",
                    ],
                    [packages?.schema || `../../schema`]: [
                        `${name}FormSchema`,
                    ],
                },
            })
            .withTypes({
                exports: {
                    [`I${name}FormSchema`]:         `IFormSchemaType.of<typeof ${name}FormSchema>`,
                    [`I${name}MantineFormContext`]: `IMantineFormContext<I${name}FormSchema>`,
                    [`I${name}FormInputFactory`]:   `IFormInputsFactory<I${name}FormSchema>`,
                }
            })
            .saveTo({
                file:   normalize(`${directory}/api/${name}FormTypes.tsx`),
                barrel: false,
            });

        withSourceFile()
            .withImports({
                imports: {
                    "@leight/form-client":       [
                        "createFormContext",
                    ],
                    [`../api/${name}FormTypes`]: [
                        `type I${name}FormSchema`,
                    ],
                },
            })
            .withConsts({
                exports: {
                    [`${name}FormStoreContext`]: {
                        body: `
createFormContext<I${name}FormSchema>({
    name: "${name}Form",
})
                        `,
                    },
                }
            })
            .saveTo({
                file:   normalize(`${directory}/FormStoreContext/${name}FormStoreContext.tsx`),
                barrel: false,
            });

        withSourceFile()
            .withImports({
                imports: {
                    "@leight/form-client":       [
                        "createMantineFormContext",
                    ],
                    [`../api/${name}FormTypes`]: [
                        `type I${name}FormSchema`,
                    ],
                },
            })
            .withConsts({
                exports: {
                    [`${name}MantineFormContext`]: {
                        body: `createMantineFormContext<I${name}FormSchema>()`,
                    },
                },
            })
            .saveTo({
                file:   normalize(`${directory}/FormStoreContext/${name}MantineFormContext.tsx`),
                barrel: false,
            });

        withSourceFile()
            .withImports({
                imports: {
                    "@leight/form-client":                           [
                        "type IWithInputProps",
                        "WithInput",
                    ],
                    [`../api/${name}FormTypes`]:                     [
                        `type I${name}FormSchema`,
                    ],
                    "react":                                         [
                        "type FC",
                    ],
                    [`../FormStoreContext/${name}FormStoreContext`]: [
                        `${name}FormStoreContext`,
                    ],
                },
            })
            .withConsts({
                exports: {
                    [`${name}Input`]: {
                        type: `FC<Omit<IWithInputProps<I${name}FormSchema>, "FormContext">>`,
                        body: `
props => {
    return <WithInput
        FormContext={${name}FormStoreContext}
        {...props}
    />;
}
                            `,
                    },
                },
            })
            .saveTo({
                file:   normalize(`${directory}/ClientForm/${name}Input.tsx`),
                barrel: false,
            });

        withSourceFile()
            .withImports({
                imports: {
                    "@leight/form-client":                             type === "common" ? [
                        "Form",
                        "type IFormProps",
                    ] : [
                        "DtoForm as Form",
                        "type IDtoFormProps as IFormProps",
                    ],
                    "react":                                           [
                        "type FC",
                    ],
                    [`../api/${name}FormTypes`]:                       [
                        `type I${name}FormSchema`,
                    ],
                    [`../FormStoreContext/${name}FormStoreContext`]:   [
                        `${name}FormStoreContext`,
                    ],
                    [`../FormStoreContext/${name}MantineFormContext`]: [
                        `${name}MantineFormContext`,
                    ],
                },
            })
            .withImports({
                imports: {
                    [packages?.schema || `../../schema`]: [
                        `${name}FormSchema`,
                    ],
                },
            })
            .withConsts({
                exports: {
                    [`${name}BaseForm`]: {
                        type: `FC<I${name}BaseFormProps>`,
                        body: `
props => {
    return <Form<I${name}FormSchema>
        MantineContext={${name}MantineFormContext}
        schemas={${name}FormSchema}
        FormContext={${name}FormStoreContext}
        withTranslation={{
            namespace: "${translation.namespace}",
            label:     "${name}BaseForm",
        }}
        {...props}
    />;
}
                        `,
                    },
                },
            })
            .withInterfaces({
                exports: {
                    [`I${name}BaseFormProps`]: {
                        extends: [
                            {
                                type: `Omit<IFormProps<I${name}FormSchema>, "FormContext" | "MantineContext" | "withTranslation">`,
                            },
                        ],
                    },
                },
            })
            .saveTo({
                file: normalize(`${directory}/ClientForm/${name}BaseForm.tsx`),
                barrel,
            });

        if (withTrpc) {
            withSourceFile()
                .withImports({
                    imports: {
                        "@leight/form-client":                       [
                            "type ITrpcFormProps",
                        ],
                        "@leight/utils-client":                      [
                            "BlockStore",
                        ],
                        [`../api/${name}FormTypes`]:                 [
                            `type I${name}FormSchema`,
                        ],
                        "react":                                     [
                            "type FC"
                        ],
                        [`../ClientForm/${name}BaseForm`]:           [
                            `type I${name}BaseFormProps`,
                            `${name}BaseForm`,
                        ],
                        [`./use${withTrpc.source}QueryInvalidator`]: [
                            `use${withTrpc.source}QueryInvalidator`,
                        ],
                    },
                })
                .withImports({
                    imports: {
                        [`./Use${withTrpc.source}SourceQuery`]: [
                            `Use${withTrpc.source}SourceQuery`,
                        ]
                    },
                })
                .withInterfaces({
                    exports: {
                        [`I${name}TrpcFormProps`]: {
                            extends: [
                                {
                                    type: `I${name}BaseFormProps`,
                                },
                                {
                                    type: `ITrpcFormProps<I${name}FormSchema>`,
                                },
                            ],
                        },
                    },
                })
                .withConsts({
                    exports: {
                        [`${name}TrpcForm`]: {
                            type: `FC<I${name}TrpcFormProps>`,
                            body: `
({onSuccess, onError, onSettled, ...props}) => {
    const {block} = BlockStore.useOptionalState() || {block: () => null};
    const mutation = Use${withTrpc.source}SourceQuery.${withTrpc.use}();
    const invalidator = use${withTrpc.source}QueryInvalidator();
    return <${name}BaseForm
        onSubmit={({request, onDefaultSubmit}) => {
            block(true);
            mutation.mutate(request, {
                onSuccess: dto => {
                    onDefaultSubmit();
                    invalidator();
                    onSuccess?.({dto});
                },
                onError: error => {
                    onError?.({error});                    
                },
                onSettled: () => {
                    block(false);
                    onSettled?.({});
                },
            });
        }}
        {...props}
    />;
}
                            `,
                        }
                    },
                })
                .saveTo({
                    file: normalize(`${directory}/ClientTrpc/${name}TrpcForm.tsx`),
                    barrel,
                });
        }
    });
};
