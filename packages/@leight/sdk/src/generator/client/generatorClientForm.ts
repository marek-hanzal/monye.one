import {withSourceFile}  from "@leight/generator-server";
import {normalize}       from "node:path";
import {type IGenerator} from "../../api";

export interface IGeneratorClientFormParams {
    forms: IGeneratorClientFormParams.IForm[];
}

export namespace IGeneratorClientFormParams {
    export interface IForm {
        /**
         * Base name exported (used to name all exported objects)
         */
        name: string;
        translation: {
            namespace: string;
        };
        packages?: IPackages;
    }

    export interface IPackages {
        /**
         * Package used to import all schema-related types (ISource implementation, IWhere and so on, can be generated by @leight).
         */
        schema?: string;
    }
}

export const generatorClientForm: IGenerator<IGeneratorClientFormParams> = async (
    {
        folder,
        barrel,
        params: {forms}
    }) => {
    const file = withSourceFile();

    file.withImports({
        imports: {
            "@leight/form-client": [
                "createFormContext",
                "Form",
                "type IFormProps",
                "type InferFormSchemas",
                "type IWithInputProps",
                "WithInput",
            ],
            "react":               [
                "type FC",
            ],
        },
    });

    forms.forEach(({name, translation, packages}) => {
        file
            .withImports({
                imports: {
                    [packages?.schema || `../schema`]: [
                        `${name}FormSchema`,
                    ],
                },
            })
            .withTypes({
                exports: {
                    [`I${name}FormSchema`]: `InferFormSchemas<typeof ${name}FormSchema>`,
                }
            })
            .withConsts({
                exports: {
                    [`${name}FormStoreContext`]: {
                        body: `
createFormContext<I${name}FormSchema>({
    name: "${name}Form",
})
                        `,
                    },
                    [`${name}BaseForm`]:         {
                        type: `FC<I${name}BaseFormProps>`,
                        body: `
props => {
    return <Form<I${name}FormSchema>
        schemas={${name}FormSchema}
        FormContext={${name}FormStoreContext}
        withTranslation={{
            namespace: "${translation.namespace}",
            label:     "${name}BaseForm",
        }}
        {...props}
    />;
}
                        `,
                    },
                    [`${name}Input`]:            {
                        type: `FC<Omit<IWithInputProps<I${name}FormSchema>, "FormContext">>`,
                        body: `
props => {
    return <WithInput
        FormContext={${name}FormStoreContext}
        {...props}
    />;
}
                            `,
                    },
                },
            })
            .withInterfaces({
                exports: {
                    [`I${name}BaseFormProps`]: {
                        extends: [
                            {
                                type: `Omit<IFormProps<I${name}FormSchema>, "FormContext" | "withTranslation">`,
                            },
                        ],
                    },
                },
            });
    });

    file.saveTo({
        file: normalize(`${process.cwd()}/${folder}/ClientForm.tsx`),
        barrel,
    });
};
