import {withSourceFile}  from "@leight/generator-server";
import {normalize}       from "node:path";
import {type IGenerator} from "../../api";

export interface IGeneratorClientSourceStoreParams {
    entities: IGeneratorClientSourceStoreParams.IEntity[];
}

export namespace IGeneratorClientSourceStoreParams {
    export interface IEntity {
        /**
         * Base name exported (used to name all exported objects)
         */
        name: string;
        /**
         * Required package imports
         */
        packages: IPackages;
    }

    export interface IPackages {
        /**
         * Package used to import all schema-related types (ISource implementation, IWhere and so on, can be generated by @leight).
         */
        schema: string;
    }
}

export const generatorClientSourceStore: IGenerator<IGeneratorClientSourceStoreParams> = async (
    {
        folder,
        barrel,
        params: {entities}
    }) => {
    const file = withSourceFile()
        .withHeader(`
    Source code containing improved Zustand store stuff for Source support (client-side).
        `);

    entities.forEach(({name, packages}) => {
        file.withImports({
                imports: {
                    "@leight/source-client": [
                        "createSourceContext",
                        "type ISourceProps",
                    ],
                    "@leight/sort-client":   [
                        "createSortContext",
                    ],
                    [packages.schema]:       [
                        `type I${name}SourceSchema`,
                        `${name}Schema`,
                        `type I${name}SortSchema`,
                        `${name}SortSchema`,
                    ],
                },
            })
            .withTypes({
                exports: {
                    [`I${name}Source`]: `ISourceProps<I${name}SourceSchema>`,
                },
            })
            .withConsts({
                exports: {
                    [`${name}SourceStore`]: {
                        comment: `
/**
 * Defines Store for ${name}, so you can access it's data.
 */
                        `,
                        body:    `
createSourceContext<I${name}SourceSchema>({
    name:   "${name}",
    schema: ${name}Schema,
})
                    `,
                    },
                    [`${name}SortStore`]:   {
                        comment: `
/**
 * Defines Store for ${name} sorting data.
 */
                        `,
                        body:    `
createSortContext<I${name}SortSchema>({
    name:   "${name}Sort",
    schema: ${name}SortSchema,
})
                    `,
                    },
                },
            });
    });

    file.saveTo({
        file: normalize(`${process.cwd()}/${folder}/ClientStore.ts`),
        barrel,
    });
};
