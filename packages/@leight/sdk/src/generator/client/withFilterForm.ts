import {IPackageType}    from "@leight/generator";
import {
    withPackageImport,
    withSourceFile
}                        from "@leight/generator-server";
import {normalize}       from "node:path";
import {type IGenerator} from "../../api";

export interface IWithFilterFormParams {
    forms: IWithFilterFormParams.IForm[];
}

export namespace IWithFilterFormParams {
    export interface IForm {
        /**
         * Base name exported (used to name all exported objects)
         */
        name: string;
        translation: {
            namespace: string;
        };
        withFilter?: IWithFilter;
        packages: IPackages;
    }

    export interface IWithFilter {
        type: string;
        package: IPackageType;
    }

    export interface IPackages {
        /**
         * Package used to import all schema-related types (ISource implementation, IWhere and so on, can be generated by @leight).
         */
        schema: string;
    }
}

export const withFilterForm: IGenerator<IWithFilterFormParams> = async (
    {
        barrel,
        directory,
        params: {forms}
    }) => {
    forms.forEach(({
                       name,
                       translation,
                       packages,
                       withFilter
                   }) => {
        console.log(`- Generating [withFilterForm] [${name}]`);

        withSourceFile()
            .withImports({
                imports: {
                    "@leight/form-client": [
                        "createFormContext",
                    ],
                    [packages.schema]:     [
                        `type I${name}FilterFormSchemaType`,
                    ],
                },
            })
            .withConsts({
                exports: {
                    [`${name}FilterFormStoreContext`]: {
                        body: `
createFormContext<I${name}FilterFormSchemaType>({
    name: "${name}FilterForm",
})
                        `,
                    },
                }
            })
            .saveTo({
                file:   normalize(`${directory}/context/${name}FilterFormStoreContext.tsx`),
                barrel: false,
            });

        withSourceFile()
            .withImports({
                imports: {
                    "@leight/form-client": [
                        "createMantineFormContext",
                    ],
                    [packages.schema]:     [
                        `type I${name}FilterFormSchemaType`,
                    ],
                },
            })
            .withConsts({
                exports: {
                    [`${name}MantineFilterFormContext`]: {
                        body: `createMantineFormContext<I${name}FilterFormSchemaType>()`,
                    },
                },
            })
            .saveTo({
                file:   normalize(`${directory}/context/${name}MantineFilterFormContext.tsx`),
                barrel: false,
            });

        withSourceFile()
            .withImports({
                imports: {
                    "@leight/form-client":                                 [
                        "type IWithInputProps",
                        "WithInput",
                    ],
                    [packages.schema]:                                     [
                        `type I${name}FilterFormSchemaType`,
                    ],
                    "react":                                               [
                        "type FC",
                    ],
                    [`../context/${name}FilterFormStoreContext`]: [
                        `${name}FilterFormStoreContext`,
                    ],
                },
            })
            .withConsts({
                exports: {
                    [`${name}FilterInput`]: {
                        type: `FC<Omit<IWithInputProps<I${name}FilterFormSchemaType>, "FormContext">>`,
                        body: `
props => {
    return <WithInput
        FormContext={${name}FilterFormStoreContext}
        {...props}
    />;
}
                            `,
                    },
                },
            })
            .saveTo({
                file:   normalize(`${directory}/form/${name}FilterInput.tsx`),
                barrel: false,
            });

        withSourceFile()
            .withImports({
                imports: {
                    "@leight/filter-client":                                 [
                        "BaseFilterForm",
                        "type IBaseFilterFormProps",
                    ],
                    "react":                                                 [
                        "type FC",
                    ],
                    [packages.schema]:                                       [
                        `type I${name}FilterFormSchemaType`,
                        `type I${name}SourceSchemaType`,
                    ],
                    [`../context/${name}FilterFormStoreContext`]:   [
                        `${name}FilterFormStoreContext`,
                    ],
                    [`../context/${name}MantineFilterFormContext`]: [
                        `${name}MantineFilterFormContext`,
                    ],
                    [`../source/${name}SourceStore`]:                        [
                        `${name}Source`,
                    ],
                },
            })
            .withImports({
                imports: {
                    [packages.schema]: [
                        `${name}FilterFormSchema`,
                    ],
                },
            })
            .withImports(withFilter?.package?.withPackage?.package ? {
                imports: {
                    [withFilter.package?.withPackage?.package]: [
                        withFilter?.package.type,
                    ]
                },
            } : undefined)
            .withConsts({
                exports: {
                    [`${name}BaseFilterForm`]: {
                        type: `FC<I${name}BaseFilterFormProps>`,
                        // language=text
                        body: `
({getFilterName, ...props}) => {
    return <BaseFilterForm<I${name}FilterFormSchemaType, I${name}SourceSchemaType>
        Source={${name}Source}
        MantineContext={${name}MantineFilterFormContext}
        schemas={${name}FilterFormSchema}
        FormContext={${name}FilterFormStoreContext}
        withTranslation={{
            namespace: "${translation.namespace}",
            label:     "${name}BaseFilterForm",
        }}
        ${withFilter ? `withFilterQuery={getFilterName ? {getName: getFilterName, type: "${withFilter.type}", UseFilterQuery: ${withPackageImport(withFilter.package)}} : undefined}\n\t\t` : "\n\t\t"}{...props}
    />;
}
                        `,
                    },
                },
            })
            .withInterfaces({
                exports: {
                    [`I${name}BaseFilterFormProps`]: {
                        extends: [
                            {
                                type: `Omit<IBaseFilterFormProps<I${name}FilterFormSchemaType, I${name}SourceSchemaType>, "SourceStore" | "FormContext" | "MantineContext" | "withTranslation">`,
                            },
                        ],
                        body:    `
getFilterName?: IBaseFilterFormProps.IWithFilterQuery<I${name}FilterFormSchemaType>["getName"];
                        `,
                    },
                },
            })
            .saveTo({
                file: normalize(`${directory}/form/${name}BaseFilterForm.tsx`),
                barrel,
            });
    });
};
