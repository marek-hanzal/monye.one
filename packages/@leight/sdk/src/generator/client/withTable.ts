import {withSourceFile}  from "@leight/generator-server";
import {normalize}       from "node:path";
import {type IGenerator} from "../../api";

export interface IWithTableParams {
    tables: IWithTableParams.ITable[];
}

export namespace IWithTableParams {
    export interface ITable {
        /**
         * Base name exported (used to name all exported objects)
         */
        name: string;
        /**
         * Required package imports
         */
        packages: IPackages;
    }

    export interface IPackages {
        /**
         * Package used to import all schema-related types (ISource implementation, IWhere and so on, can be generated by @leight).
         */
        schema: string;
    }
}

export const withTable: IGenerator<IWithTableParams> = async (
    {
        barrel,
        directory,
        params: {tables}
    }) => {
    tables.forEach((
        {
            name,
            packages
        }) => {
        console.log(`- Generating [withTable] [${name}]`);

        withSourceFile()
            .withImports({
                imports: {
                    "@leight/table-client":      [
                        "SourceTable",
                        "type ISourceTableInternalProps",
                    ],
                    [packages.schema]:           [
                        `${name}SourceSchema as SourceSchema`,
                        `type I${name}SourceSchema as ISourceSchema`,
                    ],
                    [`../source/${name}Source`]: [
                        `${name}Source`,
                    ],
                }
            })
            .withInterfaces({
                exports: {
                    [`I${name}SourceTableInternalProps<TColumnKeys extends string>`]: {
                        extends: [
                            {type: `Omit<ISourceTableInternalProps<ISourceSchema, TColumnKeys>, "Source" | "schema">`},
                        ],
                        body:    `
sourceCacheTime?: number;
                        `,
                    },
                    [`I${name}SourceTableProps<TColumnKeys extends string>`]:         {
                        extends: [
                            {type: `Omit<I${name}SourceTableInternalProps<TColumnKeys>, "columns" | "withTranslation">`},
                        ],
                    },
                },
            })
            .withConsts({
                exports: {
                    [`${name}SourceTable`]: {
                        comment: `
/**
 * Base implementation of a table providing ${name} data already connected to a source; just extend this table with
 * columns and other props as you wish.
 */
                        `,
                        // language=text
                        body: `<TColumnKeys extends string>(props: I${name}SourceTableInternalProps<TColumnKeys>) => {
    return <SourceTable<ISourceSchema, TColumnKeys>
        Source={${name}Source}
        schema={SourceSchema["DtoSchema"]}
        {...props}
    />;
}
                    `,
                    },
                },
            })
            .saveTo({
                file: normalize(`${directory}/table/${name}SourceTable.tsx`),
                barrel,
            });
    });
};
