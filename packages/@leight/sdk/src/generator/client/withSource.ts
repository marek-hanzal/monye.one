import {withSourceFile}  from "@leight/generator-server";
import {type Unboxed}    from "@leight/utils";
import {normalize}       from "node:path";
import {type IGenerator} from "../../api";
import {
    type IWithInvalidatorParams,
    withInvalidator
}                        from "./withInvalidator";
import {
    type IWithUseRepositoryParams,
    withUseRepository
}                        from "./withUseRepository";

export interface IWithSourceParams {
    sources: IWithSourceParams.ISource[];
}

export namespace IWithSourceParams {
    export interface ISource {
        /**
         * Base name exported (used to name all exported objects)
         */
        name: string;
        /**
         * Required package imports
         */
        packages: IPackages;
        withInvalidator?: Omit<Unboxed<IWithInvalidatorParams["invalidators"]>, "name" | "packages">;
        withUseRepository?: Omit<Unboxed<IWithUseRepositoryParams["repositories"]>, "name" | "packages">;
    }

    export interface IPackages {
        /**
         * Package used to import all schema-related types (ISource implementation, IWhere and so on, can be generated by @leight).
         */
        schema: string;
    }
}

export const withSource: IGenerator<IWithSourceParams> = async (
    {
        packageName,
        barrel,
        directory,
        params: {sources}
    }) => {
    sources.forEach((
        {
            name,
            packages,
            ...rest
        }) => {
        console.log(`- Generating [withSource] [${name}]`);

        withSourceFile()
            .withHeader(`
    Source code containing improved Zustand store stuff for Source support (client-side).
        `)
            .withImports({
                imports: {
                    "@leight/source-client": [
                        "withSource",
                    ],
                    [packages.schema]:       [
                        `${name}SourceSchema as SourceSchema`,
                        `type ${name}Source as Source`,
                    ],
                },
            })
            .withImports({
                imports: {
                    [`../trpc/Use${name}Repository`]:  [
                        `Use${name}Repository as UseRepository`,
                    ],
                    [`../trpc/use${name}Invalidator`]: [
                        `use${name}Invalidator as useInvalidator`,
                    ],
                },
            })
            .withConsts({
                exports: {
                    [`${name}Source`]: {
                        body: `
withSource<Source>({
    name: "${name}",
    schema: SourceSchema,
    repository: UseRepository,
    useInvalidator,
})
                    `,
                    },
                },
            })
            .saveTo({
                file: normalize(`${directory}/source/${name}Source.ts`),
                barrel,
            });

        rest.withInvalidator && withInvalidator({
            barrel,
            directory,
            packageName,
            params: {
                invalidators: [
                    {
                        name,
                        packages,
                        ...rest.withInvalidator
                    },
                ],
            },
        });

        rest.withUseRepository && withUseRepository({
            barrel,
            directory,
            packageName,
            params: {
                repositories: [
                    {
                        name,
                        packages,
                        ...rest.withUseRepository
                    },
                ],
            },
        });
    });
};
