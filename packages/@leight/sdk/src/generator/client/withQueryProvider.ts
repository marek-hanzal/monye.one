import {withSourceFile}  from "@leight/generator-server";
import {normalize}       from "node:path";
import {type IGenerator} from "../../api";

export interface IWithQueryProviderParams {
    sources: IWithQueryProviderParams.ISource[];
}

export namespace IWithQueryProviderParams {
    export interface ISource {
        /**
         * Base name exported (used to name all exported objects)
         */
        name: string;
        /**
         * Required package imports
         */
        packages: IPackages;
    }

    export interface IPackages {
        /**
         * Package used to import all schema-related types (ISource implementation, IWhere and so on, can be generated by @leight).
         */
        schema: string;
    }
}

export const withQueryProvider: IGenerator<IWithQueryProviderParams> = async (
    {
        barrel,
        directory,
        params: {sources}
    }) => {
    sources.forEach((
        {
            name,
            packages
        }) => {
        console.log(`- Generating [withQueryProvider] [${name}]`);

        withSourceFile()
            .withImports({
                imports: {
                    "@leight/source-client":     [
                        "type IQueryProviderProps",
                        "QueryProvider",
                    ],
                    [packages.schema]:           [
                        `type ${name}Source as Source`,
                    ],
                    "react":                     [
                        "type FC",
                    ],
                    [`../source/${name}Source`]: [
                        `${name}Source`,
                    ],
                }
            })
            .withInterfaces({
                exports: {
                    [`I${name}QueryProviderProps`]: {
                        extends: [
                            {type: `Omit<IQueryProviderProps<Source>, "QueryContext">`},
                        ],
                    },
                },
            })
            .withConsts({
                exports: {
                    [`${name}QueryProvider`]: {
                        type:    `FC<I${name}QueryProviderProps>`,
                        comment: `
/**
 * Provides all Query parts for ${name} used in fetching and sorting its data. 
 */
                        `,
                        body:    `props => {
    return <QueryProvider<Source>
        QueryContext={${name}Source.query}
        {...props}
    />;
}
                    `,
                    },
                }
            })
            .saveTo({
                file: normalize(`${directory}/query/${name}QueryProvider.tsx`),
                barrel,
            });
    });
};
