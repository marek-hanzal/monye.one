import {withSourceFile}  from "@leight/generator-server";
import {normalize}       from "node:path";
import {type IGenerator} from "../../api";

export interface IWithInvalidatorParams {
    invalidators: IWithInvalidatorParams.IInvalidator[];
}

export namespace IWithInvalidatorParams {
    export interface IInvalidator {
        /**
         * Base name exported (used to name all exported objects)
         */
        name: string;
        trpc: ITrpc;
        packages: IPackages;
    }

    export interface ITrpc {
        /**
         * Package (import) of client-side TRPC (should export named trpc)
         */
        package: string;
        /**
         * Part of the trpc call chain (base is `trpc`.${trpcPath}.`...rest of standard trpc router`
         */
        path: string;
        invalidators?: string[];
    }

    export interface IPackages {
        /**
         * Package used to import all schema-related types (ISource implementation, IWhere and so on, can be generated by @leight).
         */
        schema: string;
    }
}

export const withInvalidator: IGenerator<IWithInvalidatorParams> = async (
    {
        barrel,
        directory,
        params: {invalidators}
    }) => {
    invalidators.forEach((
        {
            name,
            trpc,
            packages,
        }) => {
        trpc.invalidators?.length && withSourceFile()
            .withImports({
                imports: {
                    [trpc.package]: [
                        "trpc",
                    ],
                },
            })
            .withImports({
                imports: {
                    [packages.schema]: [
                        `type IUse${name}Invalidator as IUseInvalidator`,
                    ],
                },
            })
            .withConsts({
                exports: {
                    [`use${name}Invalidator`]: {
                        type: "IUseInvalidator",
                        body: `
() => {
    const trpcContext = trpc.useContext();
    return () => {
        ${trpc.invalidators.map(invalidator => {
                            switch (invalidator) {
                                case "$query": {
                                    return `trpcContext.${trpc.path}.repository.query.invalidate();\n\t\ttrpcContext.${trpc.path}.repository.count.invalidate();`;
                                }
                            }
                            return `trpcContext.${invalidator}.invalidate();`;
                        }).join("\n\t\t")}
    };
}
                        `,
                    },
                },
            })
            .saveTo({
                file: normalize(`${directory}/trpc/use${name}Invalidator.tsx`),
                barrel,
            });
    });
};
