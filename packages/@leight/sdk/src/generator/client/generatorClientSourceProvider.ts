import {withSourceFile}  from "@leight/generator-server";
import {normalize}       from "node:path";
import {type IGenerator} from "../../api";

export interface IGeneratorClientSourceProviderParams {
    entities: IGeneratorClientSourceProviderParams.IEntity[];
}

export namespace IGeneratorClientSourceProviderParams {
    export interface IEntity {
        /**
         * Base name exported (used to name all exported objects)
         */
        name: string;
        /**
         * Required package imports
         */
        packages: IPackages;
        withTrpc?: IWithTrpc;
    }

    export interface IPackages {
        /**
         * Package used to import all schema-related types (ISource implementation, IWhere and so on, can be generated by @leight).
         */
        schema: string;
    }

    export interface IWithTrpc {
        /**
         * Package (import) of client-side TRPC (should export named trpc)
         */
        package: string;
        /**
         * Part of the trpc call chain (base is `trpc`.${trpcPath}.`...rest of standard trpc router`
         */
        path: string;
    }
}

export const generatorClientSourceProvider: IGenerator<IGeneratorClientSourceProviderParams> = async (
    {
        folder,
        barrel,
        params: {entities}
    }) => {
    const file = withSourceFile();

    entities.forEach(({name, withTrpc, packages}) => {
        file.withImports({
                imports: {
                    "@leight/source-client": [
                        "type ISourceProps",
                        "Source",
                    ],
                    "@leight/query-client":  [
                        "type IQueryProviderProps",
                        "QueryProvider",
                    ],
                    [packages.schema]:       [
                        `type I${name}SourceSchema`,
                        `${name}Schema`,
                    ],
                    "react":                 [
                        "type FC",
                    ],
                    "./ClientStore":         [
                        `${name}SourceStore`,
                        `${name}SortStore`,
                    ]
                }
            })
            .withImports(withTrpc ? undefined : {
                imports: {
                    [packages.schema]: [
                        `type IUse${name}Query`,
                        `type IUse${name}CountQuery`,
                    ],
                },
            })
            .withImports(withTrpc ? {
                imports: {
                    [withTrpc.package]: [
                        "trpc",
                    ],
                },
            } : undefined)
            .withInterfaces({
                exports: {
                    [`I${name}SourceProps`]:        {
                        extends: [
                            {type: `ISourceProps<I${name}SourceSchema>`},
                        ],
                        body:    withTrpc ? undefined : `
useSourceQuery: IUse${name}Query;
                    `,
                    },
                    [`I${name}QueryProviderProps`]: {
                        extends: [
                            {type: `IQueryProviderProps<I${name}SourceSchema>`},
                        ],
                        body:    withTrpc ? undefined : `
useCountQuery: IUse${name}CountQuery;
                    `,
                    },
                },
            })
            .withConsts({
                exports: {
                    [`${name}Source`]:        {
                        type:    `FC<I${name}SourceProps>`,
                        comment: `
/**
 * Provides access to ${name} data with a connection to filtering and sorting. 
 */
                        `,
                        body:    `props => {
    return <Source<I${name}SourceSchema>
        schema={${name}Schema}
        SourceProvider={${name}SourceStore.Provider}
        useSortState={${name}SortStore.useState}
        ${withTrpc ? `useSourceQuery={trpc.${withTrpc.path}.source.query.useQuery}\n\t\t` : "\t\t"}{...props}
    />;
}
                    `,
                    },
                    [`${name}QueryProvider`]: {
                        type:    `FC<I${name}QueryProviderProps>`,
                        comment: `
/**
 * Provides all Query parts for ${name} used in fetching and sorting its data. 
 */
                        `,
                        body:    `props => {
    return <QueryProvider<I${name}SourceSchema>
        SortProvider={${name}SortStore.Provider}
        ${withTrpc ? `useCountQuery={trpc.${withTrpc.path}.source.count.useQuery}\n\t\t` : "\t\t"}{...props}
    />;
}
                    `,
                    },
                },
            });
    });

    file.saveTo({
        file: normalize(`${process.cwd()}/${folder}/ClientSourceProvider.tsx`),
        barrel,
    });
};
