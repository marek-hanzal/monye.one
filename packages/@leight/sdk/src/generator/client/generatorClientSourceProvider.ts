import {withSourceFile}  from "@leight/generator-server";
import {normalize}       from "node:path";
import {type IGenerator} from "../../api";

export interface IGeneratorClientSourceProviderParams {
    entities: IGeneratorClientSourceProviderParams.IEntity[];
}

export namespace IGeneratorClientSourceProviderParams {
    export interface IEntity {
        /**
         * Base name exported (used to name all exported objects)
         */
        name: string;
        /**
         * Required package imports
         */
        packages: IPackages;
        withTrpc?: boolean;
    }

    export interface IPackages {
        /**
         * Package used to import all schema-related types (ISource implementation, IWhere and so on, can be generated by @leight).
         */
        schema: string;
    }
}

export const generatorClientSourceProvider: IGenerator<IGeneratorClientSourceProviderParams> = async (
    {
        barrel,
        directory,
        params: {entities}
    }) => {
    entities.forEach(({name, withTrpc, packages}) => {
        withSourceFile()
            .withImports({
                imports: {
                    "@leight/source-client":  [
                        "type ISourceProps",
                        "Source",
                    ],
                    [packages.schema]:        [
                        `type I${name}SourceSchema`,
                        `${name}SourceSchema`,
                    ],
                    "react":                  [
                        "type FC",
                    ],
                    [`./${name}SourceStore`]: [
                        `${name}SourceStore`,
                    ],
                }
            })
            .withImports(withTrpc ? undefined : {
                imports: {
                    "@leight/source": [
                        "type IUseSourceQuery",
                    ],
                },
            })
            .withImports(withTrpc ? {
                imports: {
                    [`../ClientTrpc/Use${name}SourceQuery`]: [
                        `Use${name}SourceQuery`,
                    ],
                },
            } : undefined)
            .withInterfaces({
                exports: {
                    [`I${name}SourceProps`]: {
                        extends: [
                            {type: `ISourceProps<I${name}SourceSchema>`},
                        ],
                        body:    withTrpc ? undefined : `
UseSourceQuery: IUseSourceQuery<I${name}SourceSchema>;
                    `,
                    },
                },
            })
            .withConsts({
                exports: {
                    [`${name}Source`]: {
                        type:    `FC<I${name}SourceProps>`,
                        comment: `
/**
 * Provides access to ${name} data with a connection to filtering and sorting. 
 */
                        `,
                        body:    `props => {
    return <Source<I${name}SourceSchema>
        schema={${name}SourceSchema["EntitySchema"]}
        SourceStore={${name}SourceStore}
        ${withTrpc ? `UseSourceQuery={Use${name}SourceQuery}\n\t\t` : ""}{...props}
    />;
}
                    `,
                    },
                },
            })
            .saveTo({
                file: normalize(`${directory}/ClientSource/${name}Source.tsx`),
                barrel,
            });

        withSourceFile()
            .withImports({
                imports: {
                    "@leight/query-client":   [
                        "type IQueryProviderProps",
                        "QueryProvider",
                    ],
                    [packages.schema]:        [
                        `type I${name}SourceSchema`,
                    ],
                    "react":                  [
                        "type FC",
                    ],
                    [`./${name}SourceStore`]: [
                        `${name}SourceStore`,
                    ],
                }
            })
            .withImports({
                imports: withTrpc ? {
                    [`../ClientTrpc/Use${name}SourceQuery`]: [
                        `Use${name}SourceQuery`,
                    ],
                } : {
                    "@leight/source":         [
                        "type IUseSourceQuery",
                    ],
                },
            })
            .withInterfaces({
                exports: {
                    [`I${name}QueryProviderProps`]: {
                        extends: [
                            {type: `IQueryProviderProps<I${name}SourceSchema>`},
                        ],
                        body:    withTrpc ? undefined : `
UseSourceQuery: IUseSourceQuery<I${name}SourceSchema>;
                    `,
                    },
                },
            })
            .withConsts({
                exports: {
                    [`${name}QueryProvider`]: {
                        type:    `FC<I${name}QueryProviderProps>`,
                        comment: `
/**
 * Provides all Query parts for ${name} used in fetching and sorting its data. 
 */
                        `,
                        body:    `props => {
    return <QueryProvider<I${name}SourceSchema>
        SourceStore={${name}SourceStore}
        ${withTrpc ? `UseSourceQuery={Use${name}SourceQuery}\n\t\t` : ""}{...props}
    />;
}
                    `,
                    },
                }
            })
            .saveTo({
                file: normalize(`${directory}/ClientSource/${name}QueryProvider.tsx`),
                barrel,
            });
    });
};
