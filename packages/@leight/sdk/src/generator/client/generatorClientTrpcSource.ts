import {withSourceFile}  from "@leight/generator-server";
import {normalize}       from "node:path";
import {type IGenerator} from "../../api";

export interface IGeneratorClientTrpcSourceParams {
    entities: IGeneratorClientTrpcSourceParams.IEntity[];
}

export namespace IGeneratorClientTrpcSourceParams {
    export interface IEntity {
        /**
         * Base name exported (used to name all exported objects)
         */
        name: string;
        /**
         * Required package imports
         */
        packages: IPackages;
        withTrpc: IWithTrpc;
    }

    export interface IPackages {
        /**
         * Package used to import all schema-related types (ISource implementation, IWhere and so on, can be generated by @leight).
         */
        schema: string;
    }

    export interface IWithTrpc {
        /**
         * Package (import) of client-side TRPC (should export named trpc)
         */
        package: string;
        /**
         * Part of the trpc call chain (base is `trpc`.${trpcPath}.`...rest of standard trpc router`
         */
        path: string;
        invalidators?: string[];
    }
}

export const generatorClientTrpcSource: IGenerator<IGeneratorClientTrpcSourceParams> = async (
    {
        barrel,
        directory,
        params: {entities}
    }) => {
    entities.forEach(({name, withTrpc, packages}) => {
        withTrpc.invalidators && withSourceFile()
            .withImports({
                imports: {
                    [withTrpc.package]: [
                        "trpc",
                    ],
                },
            })
            .withConsts({
                exports: {
                    [`use${name}QueryInvalidator`]: {
                        body: `
() => {
    const trpcContext = trpc.useContext();
    return () => {
        ${withTrpc.invalidators.map(invalidator => `trpcContext.${invalidator}.invalidate();`).join("\n\t\t")}
    };
}
                        `,
                    },
                },
            })
            .saveTo({
                file: normalize(`${directory}/ClientTrpc/use${name}QueryInvalidator.tsx`),
                barrel,
            });

        withSourceFile()
            .withImports({
                imports: {
                    "@leight/source-client": [
                        "withSourceQuery",
                    ],
                    [packages.schema]:       [
                        `type I${name}SourceSchema`,
                        `type IUse${name}SourceQuery`,
                    ],
                }
            })
            .withImports({
                imports: {
                    [withTrpc.package]: [
                        "trpc",
                    ],
                },
            })
            .withConsts({
                exports: {
                    [`Use${name}SourceQuery`]: {
                        type: `IUse${name}SourceQuery`,
                        body: `withSourceQuery<I${name}SourceSchema>(trpc.${withTrpc.path}.source)`,
                    },
                }
            })
            .saveTo({
                file: normalize(`${directory}/ClientTrpc/Use${name}SourceQuery.tsx`),
                barrel,
            });
    });
};
