import {withSourceFile}  from "@leight/generator-server";
import {normalize}       from "node:path";
import {type IGenerator} from "../api";

export interface IGeneratorClientSourceParams {
    /**
     * Package used to import schema (usually generated by the leight sdk)
     */
    schemaPackage: string;
    /**
     * Package (import) of client-side TRPC (should export named trpc)
     */
    trpcPackage: string | false;
    /**
     * Part of the trpc call chain (base is `trpc`.${trpcPath}.`...rest of standard trpc router`
     */
    trpcPath: string | false;
    modelName: string;
}

export const generatorClientSource: IGenerator<IGeneratorClientSourceParams> = async (
    {
        file,
        barrel,
        params: {
                    schemaPackage,
                    modelName,
                    trpcPackage,
                    trpcPath,
                }
    }) => {
    withSourceFile()
        .withImports({
            imports: {
                "@leight/source-client": [
                    "type ISourceProps",
                    "Source",
                ],
                "@leight/query-client":  [
                    "type IQueryProviderProps",
                    "QueryProvider",
                ],
                [schemaPackage]:         [
                    `type I${modelName}SourceSchema`,
                    `${modelName}Schema`,
                ],
                "react":                 [
                    "type FC",
                ],
                "./client-context":      [
                    `${modelName}Provider`,
                    `${modelName}SortProvider`,
                    `use${modelName}Sort`,
                ]
            }
        })
        .withImports(trpcPackage ? {
            imports: {
                [trpcPackage]: [
                    "trpc",
                ],
            },
        } : undefined)
        .withInterfaces((trpcPackage && trpcPath) ? {
            exports: {
                [`I${modelName}SourceProps`]:        {
                    extends: `ISourceProps<I${modelName}SourceSchema>`,
                },
                [`I${modelName}QueryProviderProps`]: {
                    extends: `IQueryProviderProps<I${modelName}SourceSchema>`,
                },
            },
        } : undefined)
        .withConsts((trpcPackage && trpcPath) ? {
            exports: {
                [`${modelName}Source`]:        {
                    type: `FC<I${modelName}SourceProps>`,
                    body: `props => {
    return <Source<I${modelName}SourceSchema>
        schema={${modelName}Schema}
        SourceProvider={${modelName}Provider}
        useSourceQuery={trpc.${trpcPath}.source.query.useQuery}
        useSortState={use${modelName}Sort}
        {...props}
    />;
}
                    `,
                },
                [`${modelName}QueryProvider`]: {
                    type: `FC<I${modelName}QueryProviderProps>`,
                    body: `props => {
    return <QueryProvider<I${modelName}SourceSchema>
        useCountQuery={trpc.${trpcPath}.source.count.useQuery}
        SortProvider={${modelName}SortProvider}
        {...props}
    />;
}
                    `,
                },
            },
        } : undefined)
        .saveTo({
            file: normalize(`${process.cwd()}/${file}`),
            barrel,
        });
};
