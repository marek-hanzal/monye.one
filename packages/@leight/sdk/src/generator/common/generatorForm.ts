import {IPackageType}    from "@leight/generator";
import {
    withPackageType,
    withSourceFile
}                        from "@leight/generator-server";
import {normalize}       from "node:path";
import {type IGenerator} from "../../api";

export interface IGeneratorFormParams {
    forms: IGeneratorFormParams.IForm[];
}

export namespace IGeneratorFormParams {
    export interface IForm {
        /**
         * Base name exported (used to name all exported objects)
         */
        name: string;
        packages?: IPackages;
        schema: ISchema;
    }

    export interface IPackages {
        /**
         * Package used to import all schema-related types (ISource implementation, IWhere and so on, can be generated by @leight).
         */
        schema?: string;
    }

    export interface ISchema {
        values: IPackageType;
        request?: IPackageType;
        dto?: IPackageType;
    }
}

export const generatorForm: IGenerator<IGeneratorFormParams> = async (
    {
        directory,
        params: {forms}
    }) => {
    forms.forEach(({name, packages, schema}) => {
        withSourceFile()
            .withImports({
                imports: {
                    "@leight/form":                                      [
                        "type IMantineFormContext",
                        "type IFormInputsFactory",
                    ],
                    [packages?.schema || `../schema/${name}FormSchema`]: [
                        `type I${name}FormSchema`,
                    ],
                },
            })
            .withTypes({
                exports: {
                    [`I${name}MantineFormContext`]: `IMantineFormContext<I${name}FormSchema>`,
                    [`I${name}FormInputFactory`]:   `IFormInputsFactory<I${name}FormSchema>`,
                }
            })
            .saveTo({
                file:   normalize(`${directory}/api/${name}FormTypes.tsx`),
                barrel: false,
            });

        withSourceFile()
            .withImports({
                imports: {
                    "@leight/form": [
                        "withFormSchema",
                        "type IFormSchemaType",
                    ],
                },
            })
            .withImports({
                imports: schema.values.withPackage ? {
                    [schema.values.withPackage.package]: [
                        schema.values.type,
                    ],
                } : {},
            })
            .withImports({
                imports: schema.request?.withPackage ? {
                    [schema.request.withPackage.package]: [
                        schema.request.type,
                    ],
                } : {
                    "@leight/form": [
                        "FormRequestSchema",
                    ],
                },
            })
            .withImports({
                imports: schema.dto?.withPackage ? {
                    [schema.dto.withPackage.package]: [
                        schema.dto.type,
                    ],
                } : {
                    "@leight/form": [
                        "FormDtoSchema",
                    ],
                },
            })
            .withTypes({
                exports: {
                    [`I${name}FormSchema`]: `IFormSchemaType.of<typeof ${name}FormSchema>`,
                }
            })
            .withConsts({
                exports: {
                    [`${name}FormSchema`]: {
                        body: `
withFormSchema({
    ValuesSchema:  ${withPackageType(schema.values)},
    RequestSchema: ${schema.request ? withPackageType(schema.request) : "FormRequestSchema"},
    DtoSchema:     ${schema.dto ? withPackageType(schema.dto) : "FormDtoSchema"},
})
                        `,
                    }
                }
            })
            .saveTo({
                file:   normalize(`${directory}/schema/${name}FormSchema.tsx`),
                barrel: false,
            });
    });
};
