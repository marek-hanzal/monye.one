import {withSourceFile}  from "@leight/generator-server";
import {normalize}       from "node:path";
import {type IGenerator} from "../../api";

export interface IWithFormParams {
    forms: IWithFormParams.IForm[];
}

export namespace IWithFormParams {
    export interface IForm {
        /**
         * Base name exported (used to name all exported objects)
         */
        name: string;
        packages?: IPackages;
    }

    export interface IPackages {
        /**
         * Package used to import all schema-related types (ISource implementation, IWhere and so on, can be generated by @leight).
         */
        schema?: string;
    }
}

export const withForm: IGenerator<IWithFormParams> = async (
    {
        directory,
        params: {forms}
    }) => {
    forms.forEach(({
                       name,
                       packages
                   }) => {
        console.log(`- Generating [withForm] [${name}]`);

        withSourceFile()
            .withImports({
                imports: {
                    "@leight/form":                                         [
                        "type IFormInputsFactory",
                    ],
                    [packages?.schema || `../../schema/${name}FormSchema`]: [
                        `type I${name}FormSchemaType`,
                    ],
                },
            })
            .withTypes({
                exports: {
                    [`I${name}FormInputFactory`]: `IFormInputsFactory<I${name}FormSchemaType>`,
                }
            })
            .saveTo({
                file:   normalize(`${directory}/form/I${name}FormInputFactory.tsx`),
                barrel: false,
            });

        withSourceFile()
            .withImports({
                imports: {
                    "@leight/form":                                         [
                        "type IMantineFormContext",
                    ],
                    [packages?.schema || `../../schema/${name}FormSchema`]: [
                        `type I${name}FormSchemaType`,
                    ],
                },
            })
            .withTypes({
                exports: {
                    [`I${name}MantineFormContext`]: `IMantineFormContext<I${name}FormSchemaType>`,
                }
            })
            .saveTo({
                file:   normalize(`${directory}/form/I${name}MantineFormContext.tsx`),
                barrel: false,
            });
    });
};
