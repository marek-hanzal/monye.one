/**
	This is a file generated by MCP (managed code pattern) approach.
    
    So, please, DO NOT modify this file as it would get re-generated and you would be f*cked up.
 */
import {
	router,
	procedure
} from "../router";
import {BankSourceProcedure} from "@monye.one/bank-server";
import {CalendarEventSourceProcedure} from "@monye.one/book-server";
import {JobSourceProcedure} from "@leight/job-server";
import {TransactionSourceProcedure} from "@monye.one/transaction-server";

export const BankSourceRouter = router({
    create: procedure
                .input(BankSourceProcedure.CreateSchema)
                .mutation(BankSourceProcedure.Create),
    patch:  procedure
                .input(BankSourceProcedure.PatchSchema)
                .mutation(BankSourceProcedure.Patch),
    query:  procedure
                .input(BankSourceProcedure.QueryOptionalSchema)
                .query(BankSourceProcedure.Query),
    count:  procedure
                .input(BankSourceProcedure.QueryOptionalSchema)
                .query(BankSourceProcedure.QueryCount),
    fetch:  procedure
                .input(BankSourceProcedure.QuerySchema)
                .query(BankSourceProcedure.Fetch),
    find:   procedure
                .input(BankSourceProcedure.IdentitySchema)
                .query(BankSourceProcedure.Find),
});
export const CalendarEventSourceRouter = router({
    create: procedure
                .input(CalendarEventSourceProcedure.CreateSchema)
                .mutation(CalendarEventSourceProcedure.Create),
    patch:  procedure
                .input(CalendarEventSourceProcedure.PatchSchema)
                .mutation(CalendarEventSourceProcedure.Patch),
    query:  procedure
                .input(CalendarEventSourceProcedure.QueryOptionalSchema)
                .query(CalendarEventSourceProcedure.Query),
    count:  procedure
                .input(CalendarEventSourceProcedure.QueryOptionalSchema)
                .query(CalendarEventSourceProcedure.QueryCount),
    fetch:  procedure
                .input(CalendarEventSourceProcedure.QuerySchema)
                .query(CalendarEventSourceProcedure.Fetch),
    find:   procedure
                .input(CalendarEventSourceProcedure.IdentitySchema)
                .query(CalendarEventSourceProcedure.Find),
});
export const JobSourceRouter = router({
    create: procedure
                .input(JobSourceProcedure.CreateSchema)
                .mutation(JobSourceProcedure.Create),
    patch:  procedure
                .input(JobSourceProcedure.PatchSchema)
                .mutation(JobSourceProcedure.Patch),
    query:  procedure
                .input(JobSourceProcedure.QueryOptionalSchema)
                .query(JobSourceProcedure.Query),
    count:  procedure
                .input(JobSourceProcedure.QueryOptionalSchema)
                .query(JobSourceProcedure.QueryCount),
    fetch:  procedure
                .input(JobSourceProcedure.QuerySchema)
                .query(JobSourceProcedure.Fetch),
    find:   procedure
                .input(JobSourceProcedure.IdentitySchema)
                .query(JobSourceProcedure.Find),
});
export const TransactionSourceRouter = router({
    create: procedure
                .input(TransactionSourceProcedure.CreateSchema)
                .mutation(TransactionSourceProcedure.Create),
    patch:  procedure
                .input(TransactionSourceProcedure.PatchSchema)
                .mutation(TransactionSourceProcedure.Patch),
    query:  procedure
                .input(TransactionSourceProcedure.QueryOptionalSchema)
                .query(TransactionSourceProcedure.Query),
    count:  procedure
                .input(TransactionSourceProcedure.QueryOptionalSchema)
                .query(TransactionSourceProcedure.QueryCount),
    fetch:  procedure
                .input(TransactionSourceProcedure.QuerySchema)
                .query(TransactionSourceProcedure.Fetch),
    find:   procedure
                .input(TransactionSourceProcedure.IdentitySchema)
                .query(TransactionSourceProcedure.Find),
});
/**
 * Default export marking a file it's generated and also preventing failing
 * an empty file export (every module "must" have an export).
 */
export const $leight_xr5pngdz13k40dm6ndto3nov = true;