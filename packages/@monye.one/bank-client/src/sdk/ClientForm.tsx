/**
	This is a file generated by MCP (managed code pattern) approach.
    
    So, please, DO NOT modify this file as it would get re-generated and you would be f*cked up.
 */
import {
	createFormContext,
	createMantineFormContext,
	type IMantineFormContext,
	Form,
	type IFormProps,
	type InferFormSchemas,
	type IWithInputProps,
	WithInput,
	type ITrpcFormProps
} from "@leight/form-client";
import {type FC} from "react";
import {BankCreateFormSchema} from "../schema";
import {UseBankSourceQuery} from "./ClientTrpcSource";
import {BlockStore} from "@leight/utils-client";

export type IBankCreateFormSchema = InferFormSchemas<typeof BankCreateFormSchema>;
export type IBankCreateMantineFormContext = IMantineFormContext<IBankCreateFormSchema>;

export interface IBankCreateBaseFormProps extends Omit<IFormProps<IBankCreateFormSchema>, "FormContext" | "MantineContext" | "withTranslation"> {
}

export interface IBankCreateTrpcFormProps extends IBankCreateBaseFormProps, ITrpcFormProps<IBankCreateFormSchema> {
}

export const BankCreateFormStoreContext = createFormContext<IBankCreateFormSchema>({
    name: "BankCreateForm",
});
export const BankCreateBaseForm: FC<IBankCreateBaseFormProps> = props => {
    return <Form<IBankCreateFormSchema>
        MantineContext={BankCreateMantineFormContext}
        schemas={BankCreateFormSchema}
        FormContext={BankCreateFormStoreContext}
        withTranslation={{
            namespace: "bank",
            label:     "BankCreateBaseForm",
        }}
        {...props}
    />;
};
export const BankCreateInput: FC<Omit<IWithInputProps<IBankCreateFormSchema>, "FormContext">> = props => {
    return <WithInput
        FormContext={BankCreateFormStoreContext}
        {...props}
    />;
};
export const BankCreateMantineFormContext = createMantineFormContext<IBankCreateFormSchema>();
export const BankCreateTrpcForm: FC<IBankCreateTrpcFormProps> = ({onSuccess, onError, onSettled, ...props}) => {
    const {block} = BlockStore.useOptionalState() || {block: () => null};
    const mutation = UseBankSourceQuery.useCreate();
    return <BankCreateBaseForm
        onSubmit={({request}) => {
            block(true);
            mutation.mutate(request, {
                onSuccess: dto => {
                    onSuccess?.({dto});
                },
                onError: error => {
                    onError?.({error});                    
                },
                onSettled: () => {
                    block(false);
                    onSettled?.({});
                },
            });
        }}
        {...props}
    />;
};;
/**
 * Default export marking a file it's generated and also preventing failing
 * an empty file export (every module "must" have an export).
 */
export const $leight_egkr49wueslu8r1ywxqk4ban = true;